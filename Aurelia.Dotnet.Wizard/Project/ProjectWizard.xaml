<Window x:Class="Aurelia.Dotnet.Wizard.ProjectWizard"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:vs="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:ext="clr-namespace:Aurelia.DotNet.Extensions.Models;assembly=Aurelia.DotNet.Extensions"
        xmlns:app="clr-namespace:Aurelia.DotNet.Wizard"
        Background="{DynamicResource {x:Static vs:EnvironmentColors.PanelGradientBrushKey}}"
        Foreground="{DynamicResource {x:Static vs:EnvironmentColors.PanelTextBrushKey}}"
        d:DataContext="{d:DesignInstance app:ProjectWizardViewModel, IsDesignTimeCreatable=True}"
        mc:Ignorable="d" Title="Aurelia Project Scaffolder"
        WindowStartupLocation="CenterOwner" FontSize="14" Icon="../aurelia.ico"
                WindowStyle="None"
        AllowsTransparency="True"
        MinWidth="750" MinHeight="500" SizeToContent="WidthAndHeight"
        >
    <Window.Resources>
        <!--Stlye stuff like visual studio-->
        <ResourceDictionary>
            <Style TargetType="Window">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vs:EnvironmentColors.PanelBorderBrushKey}}"/>
                <Setter Property="BorderThickness" Value="2"/>
            </Style>
            <Style TargetType="Border">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vs:EnvironmentColors.PanelBorderBrushKey}}"/>
                <Setter Property="BorderThickness" Value="2"/>
            </Style>
            <Style TargetType="CheckBox">
                <Setter Property="VerticalAlignment" Value="Bottom"/>
                <Setter Property="Margin" Value="10,5,10,3"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vs:EnvironmentColors.PanelTextBrushKey}}"/>
                <Style.Triggers>
                    <Trigger Property="Grid.Column" Value="1">
                        <Setter Property="Margin" Value="20,5,10,3"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="Label">
                <Setter Property="Margin" Value="5,5,10,0"/>
                <Setter Property="VerticalAlignment" Value="Bottom"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vs:EnvironmentColors.PanelTextBrushKey}}"/>
                <Style.Triggers>
                    <Trigger Property="Grid.Column" Value="1">
                        <Setter Property="Margin" Value="15,5,10,0"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="{x:Type ComboBox}">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vs:EnvironmentColors.ComboBoxBorderBrushKey}}"/>

                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="VerticalAlignment" Value="Top"/>
                <Setter Property="Margin" Value="10,0,10,5"/>
                <Setter Property="Padding" Value="5,5,0,5"/>
            </Style>

            <Style TargetType="TextBox">
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="VerticalAlignment" Value="Top"/>
                <Setter Property="Margin" Value="10,0,10,5"/>
                <EventSetter Event="GotFocus" Handler="SelectAllOnFocus"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static vs:EnvironmentColors.SearchBoxBackgroundBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vs:EnvironmentColors.PanelTextBrushKey}}"/>
                <Setter Property="Padding" Value="5,5,0,5"/>
                <EventSetter Event="GotFocus" Handler="SelectAllOnFocus"/>
                <Style.Triggers>
                    <Trigger Property="Grid.Column" Value="1">
                        <Setter Property="Margin" Value="20,0,10,5"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="Button">
                <Setter Property="Margin" Value="10"/>
                <Setter Property="MinWidth" Value="100"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static vs:EnvironmentColors.ToolWindowButtonInactiveBorderBrushKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vs:EnvironmentColors.ButtonTextBrushKey}}" />
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource {x:Static vs:EnvironmentColors.StartPageButtonMouseOverBackgroundBrushKey}}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="TextBlock">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vs:EnvironmentColors.PanelTextBrushKey}}" />
            </Style>
        </ResourceDictionary>
    </Window.Resources>
    <DockPanel LastChildFill="True">
        <Border BorderThickness="0" Background="Transparent" DockPanel.Dock="Top" Height="25" x:Name="titlebar">
            <TextBlock Text="{Binding Title, RelativeSource={RelativeSource FindAncestor,AncestorType=Window},FallbackValue=Title}" 
                       Margin="10,0,0,0"
                       VerticalAlignment="Center">
            </TextBlock>
        </Border>
        <Grid Margin="10" FocusManager.FocusedElement="{Binding ElementName=compName}">
            <Grid.Resources>
                <app:EnumValuesConverter x:Key="EnumValueConverter" />
                <app:EnumToStringValueConverter x:Key="EnumStringConverter" />
            </Grid.Resources>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*"/>
                <ColumnDefinition Width="1.2*"/>
            </Grid.ColumnDefinitions>



            <!--Possible wizard goes rt here-->
            <Image HorizontalAlignment="Left" Width="350" Grid.ColumnSpan="2" x:Name="imgAurelia" ></Image>

            <StackPanel Grid.Row="1">
                <Label>Transpiler</Label>
                <ComboBox x:Name="cmbTranspiler" Text="Transpiler" ItemsSource="{Binding Source={x:Type ext:Transpiler}, Mode=OneTime, Converter={StaticResource EnumValueConverter}}"
                  SelectedItem="{Binding Transpiler}">
                </ComboBox>
            </StackPanel>

            <StackPanel Grid.Row="2">
                <Label>Http Protocol</Label>
                <ComboBox x:Name="cmbHttp" Text="Http Protocol" ItemsSource="{Binding Source={x:Type ext:HttpProtocol}, Mode=OneTime, Converter={StaticResource EnumValueConverter}}"
                  SelectedItem="{Binding HttpProtocol}">
                </ComboBox>
            </StackPanel>
            <StackPanel Grid.Row="3">
                <Label>Loader/Bundler</Label>
                <ComboBox x:Name="cmbLoader" Text="Loader/Bundler" ItemsSource="{Binding Source={x:Type ext:LoaderBundle}, Mode=OneTime, Converter={StaticResource EnumValueConverter}}"
                  SelectedItem="{Binding LoaderBundle}">
                </ComboBox>
            </StackPanel>
            <StackPanel Grid.Row="4">
                <Label>Style Sheet Langauge</Label>
                <ComboBox Text="Style Sheet Langauge" ItemsSource="{Binding Source={x:Type ext:StylesheetLanguage}, Mode=OneTime, Converter={StaticResource EnumValueConverter}}"
                  SelectedItem="{Binding StylesheetLanguage}">
                </ComboBox>
            </StackPanel>
            <StackPanel Grid.Row="5">
                <Label>Port</Label>
                <TextBox x:Name="txtPort" PreviewTextInput="TxtPort_PreviewTextInput" Text="{Binding Port}" />
            </StackPanel>

            <!--Custom route generation goes here-->
            <CheckBox Margin="0,0,0,10"  HorizontalAlignment="Left" VerticalAlignment="Bottom" Grid.Column="1" Grid.Row="1" IsChecked="{Binding GenerateRoutes}" >Generate Routes
            </CheckBox>
            <TreeView Margin="0,0,0,5" IsEnabled="{Binding GenerateRoutes}" Grid.Column="1" Grid.Row="2" Grid.RowSpan="4" ItemsSource="{Binding Routes}" x:Name="routeTreeView">
                <TreeView.Resources>
                    <HierarchicalDataTemplate  x:Key="ChildRouteTemplate" ItemsSource="{Binding ChildRoutes}">
                        <TextBlock Text="{Binding Title}" TextWrapping="Wrap" TextTrimming="CharacterEllipsis" Foreground="Red"/>
                    </HierarchicalDataTemplate>
                    <HierarchicalDataTemplate x:Key="RouteTemplate" ItemsSource="{Binding ChildRoutes}" ItemTemplate="{StaticResource ChildRouteTemplate}">
                        <StackPanel>
                            <TextBlock Text="{Binding Name}" TextWrapping="Wrap" TextTrimming="CharacterEllipsis"/>
                        </StackPanel>
                    </HierarchicalDataTemplate>
                </TreeView.Resources>

            </TreeView> 

            <StackPanel Grid.Column="1" Grid.Row="6" Orientation="Horizontal" 
                    HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0,20,0,0">
                <Button x:Name="addButton" Click="SaveChanges" IsDefault="True">Create</Button>
                <Button Click="CancelChanges" IsCancel="True">Cancel</Button>
            </StackPanel>
        </Grid>
    </DockPanel>
</Window>
